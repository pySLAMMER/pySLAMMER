name: Update Documentation for pySLAMMER Release

on:
  repository_dispatch:
    types: [pyslammer_release]

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout documentation repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Extract release info
        id: release
        run: |
          echo "version=${{ github.event.client_payload.version }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ github.event.client_payload.tag_name }}" >> $GITHUB_OUTPUT
          
      - name: Create release branch
        run: |
          BRANCH_NAME="release/pyslammer-v${{ steps.release.outputs.version }}"
          git checkout -b "$BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        id: branch
          
      - name: Update version references in docs
        run: |
          # Update any version references in documentation
          # This will depend on your docs structure - examples:
          
          # Update version in config files
          if [ -f "mkdocs.yml" ]; then
            sed -i "s/version: .*/version: ${{ steps.release.outputs.version }}/" mkdocs.yml
          fi
          
          # Update version in documentation files (adjust paths as needed)
          find . -name "*.md" -exec sed -i "s/pySLAMMER v[0-9]\+\.[0-9]\+\.[0-9]\+/pySLAMMER v${{ steps.release.outputs.version }}/g" {} \;
          
          # Update installation instructions
          find . -name "*.md" -exec sed -i "s/pyslammer==[0-9]\+\.[0-9]\+\.[0-9]\+/pyslammer==${{ steps.release.outputs.version }}/g" {} \;
          
      - name: Create release notes file
        run: |
          cat > "releases/v${{ steps.release.outputs.version }}.md" << 'EOF'
          # pySLAMMER v${{ steps.release.outputs.version }}
          
          **Release Date:** $(date +%Y-%m-%d)
          **PyPI Release:** ${{ github.event.client_payload.release_url }}
          
          ## Release Notes
          
          ${{ github.event.client_payload.release_notes }}
          
          ## Installation
          
          ```bash
          pip install pyslammer==${{ steps.release.outputs.version }}
          ```
          EOF
          
      - name: Commit changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update docs for pySLAMMER v${{ steps.release.outputs.version }}
            
            - Updated version references
            - Added release notes
            - Updated installation instructions
            
            Triggered by: ${{ github.event.client_payload.release_url }}"
          fi
          
      - name: Push branch
        run: |
          git push origin "${{ steps.branch.outputs.branch_name }}"
          
      - name: Create Pull Request
        run: |
          gh pr create \
            --title "ğŸ“š Update docs for pySLAMMER v${{ steps.release.outputs.version }}" \
            --body "$(cat <<'EOF'
          ## Summary
          
          Automated documentation update triggered by pySLAMMER release v${{ steps.release.outputs.version }}.
          
          ### Changes
          - Updated version references throughout documentation
          - Added release notes from GitHub release
          - Updated installation instructions
          
          ### Review Checklist
          - [ ] Version numbers are correctly updated
          - [ ] Release notes are accurate and well-formatted
          - [ ] Installation instructions work correctly
          - [ ] All documentation builds successfully
          - [ ] Breaking changes are documented (if any)
          
          **Source Release:** ${{ github.event.client_payload.release_url }}
          
          ğŸ¤– Generated by GitHub Actions
          EOF
          )" \
            --head "${{ steps.branch.outputs.branch_name }}" \
            --base main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}